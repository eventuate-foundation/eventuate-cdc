buildscript {
    repositories {
        maven {
          url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()

        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath "com.avast.gradle:gradle-docker-compose-plugin:$dockerComposePluginVersion"
        classpath "io.eventuate.plugins.gradle:eventuate-plugins-gradle-publish:$eventuatePluginsGradleVersion"
    }
}

plugins {
    id "com.github.hierynomus.license" version "0.12.1"
}

apply plugin: 'docker-compose'
apply plugin: DockerServicesPlugin
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublish"
apply plugin: "io.eventuate.plugins.gradle.publish.EventuatePublishDockerImages"

allprojects {
    group = "io.eventuate.cdc"
}

projects {
    license {
        header rootProject.file('src/license/HEADER')
    }
}

def testLibraries = ["eventuate-local-java-test-util", "eventuate-cdc-testcontainers"]

subprojects {

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(testLibraries.contains(project.name) ? 8 : 17))
        }
    }


    repositories {
        mavenCentral()
        eventuateMavenRepoUrl.split(',').each { repoUrl -> maven { url repoUrl } }
    }
    if (!project.name.endsWith("-bom")) {
        dependencies {
            if (!testLibraries.contains(project.name)) {
                implementation(platform("org.springframework.boot:spring-boot-dependencies:$springBootVersion")) {
                    exclude group: 'ch.qos.logback'
                }

                constraints {
                    implementation("org.apache.kafka:kafka-clients") {
                        version {
                            strictly(kafkaClientVersion)
                        }
                    }
                    implementation("org.apache.kafka:connect-api") {
                        version {
                            strictly("0.10.0.1")
                        }
                    }
                    implementation("org.redisson:redisson") {
                        version {
                            strictly("3.16.8")
                        }
                    }
                }
            }

            testImplementation "junit:junit:4.12"
        }
    }
}

if (!project.ext.has("database")) {
    project.ext.set("database", System.env.DATABASE == null || System.env.DATABASE == "" ? "mysql" : "$System.env.DATABASE")
}

if (!project.ext.has("databaseVersion")) {
    project.ext.set("databaseVersion", System.env.DATABASE_VERSION == null ? "" : "$System.env.DATABASE_VERSION")
}

if (!project.ext.has("mode")) {
    project.ext.set("mode", System.env.MODE == null || System.env.MODE == "" ? "binlog" : "$System.env.MODE")
}

if (mode == "unified") {
    project.ext.set("databaseDockerFile", "docker-compose-unified.yml")
    project.ext.set("databaseDockerCdcFile", "docker-compose-cdc-unified.yml")
} else {
    project.ext.set("databaseDockerFile", "docker-compose-${database}${databaseVersion}.yml")
    project.ext.set("databaseDockerCdcFile", "docker-compose-cdc-${database}-${mode}.yml")
}

print("databaseDockerCdcFile=$databaseDockerCdcFile")

dockerCompose {
    environment.put "EVENTUATE_COMMON_VERSION", eventuateCommonImageVersion
    environment.put "EVENTUATE_ACTIVE_MQ_VERSION", eventuateActiveMQImageVersion
    environment.put "EVENTUATE_RABBIT_MQ_VERSION", eventuateRabbitMQImageVersion
    environment.put "EVENTUATE_MESSAGING_KAFKA_IMAGE_VERSION", eventuateMessagingKafkaImageVersion

    environment.put "DOCKER_IMAGE_TAG", version

    removeOrphans = true
    retainContainersOnStartupFailure = true

    mysql {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
    }

    mysql8 {
        projectName = null
        useComposeFiles = ["docker-compose-mysql8.yml"]
    }

    mysql8cdcpolling {
        projectName = null
        useComposeFiles = ["docker-compose-mysql8.yml", "docker-compose-cdc-mysql-polling.yml"]
        startedServices = ["eventuate-cdc-service"]
    }

    mysql8cdcunifiedpolling {
        environment.put "EVENTUATE_OUTBOX_TABLES", "8"
        projectName = null
        useComposeFiles = ["docker-compose-mysql8.yml", "docker-compose-cdc-unified-polling-mysql.yml"]
        startedServices = ["eventuate-cdc-service"]
    }

    mysqlonly {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml"]
        startedServices = ["mysql"]
        removeOrphans = false
    }

    mysql8only {
        projectName = null
        useComposeFiles = ["docker-compose-mysql8.yml"]
        startedServices = ["mysql"]
        removeOrphans = false
    }

    mysql8KafkaOnly {
        projectName = null
        useComposeFiles = ["docker-compose-mysql8.yml"]
        startedServices = ["kafka"]
        removeOrphans = false
    }

    mysqlmigration {
        projectName = null
        useComposeFiles = ["docker-compose-eventuate-local-mysql-for-migration.yml"]
        startedServices = project.ext.composeStartedServices()
    }

    mariadb {
        projectName = null
        useComposeFiles = ["docker-compose-mariadb.yml"]
    }

    mariadbonly {
        projectName = null
        useComposeFiles = ["docker-compose-mariadb.yml"]
        startedServices = ["mariadb"]
        removeOrphans = false
    }

    mssql {
        projectName = null
        useComposeFiles = ["docker-compose-mssql.yml"]
    }

    mssqlonly {
        projectName = null
        useComposeFiles = ["docker-compose-mssql.yml"]
        startedServices = ["mssql"]
        removeOrphans = false
    }

    postgres {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
    }

    postgresonly {
        projectName = null
        useComposeFiles = ["docker-compose-postgres.yml"]
        startedServices = ["postgres"]
        removeOrphans = false
    }

    unified {
        projectName = null
        useComposeFiles = ["docker-compose-unified.yml", "docker-compose-cdc-unified.yml"]
    }

    publish {
        projectName = null
        useComposeFiles = ["docker-compose-mysql.yml", "docker-compose-cdc-mysql-binlog.yml"]
    }
}

tasks*.each { t ->
    if (t.name.endsWith("ComposeUp") || t.name.endsWith("ComposeBuild"))
        subprojects.each {
            if (it.name.endsWith("-service")) {
                t.dependsOn(":" + it.name + ":assemble")
            }
        }
}

task aggregatedTestReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the 'test' task in all subprojects
    reportOn subprojects.findAll { it.name != "eventuate-cdc-bom" }*.test
}

gradle.projectsEvaluated {
    task aggregateJavaDocs(type: Javadoc) {
        description = 'Aggregates Javadoc API documentation of all subprojects.'
        group = JavaBasePlugin.DOCUMENTATION_GROUP

        destinationDir file("$buildDir/docs/javadoc")
    }
}
